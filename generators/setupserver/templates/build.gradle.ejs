buildscript {
  ext {
    springBootVersion = '1.3.3.RELEASE'
  }
  repositories {
    jcenter()
    maven { url 'http://repo.spring.io/plugins-release' }
  }
  dependencies {
    classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
    classpath 'org.springframework.build.gradle:propdeps-plugin:0.0.7'
    classpath 'org.unbroken-dome.gradle-plugins:gradle-testsets-plugin:1.2.0'
  }
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'spring-boot'
apply plugin: 'scala'
apply plugin: 'org.unbroken-dome.test-sets'
apply plugin: 'propdeps'
apply plugin: 'propdeps-maven'
apply plugin: 'propdeps-idea'
apply plugin: 'maven'

jar {
  baseName = '<%= project.baseName %>'
  version = '0.0.1-SNAPSHOT'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
  mavenCentral()
  maven {
    name "typesafe-maven-release"
    url "https://repo.typesafe.com/typesafe/maven-releases"
  }
  maven { url "https://jitpack.io" }
}


dependencies {
  compile 'org.springframework.boot:spring-boot-starter'
  compile 'org.springframework.boot:spring-boot-starter-web'
  compile 'com.github.sthzg.boot2react-spring-boot-starter:boot2react-spring-boot-starter:initial_development-SNAPSHOT'
  compile 'com.fasterxml.jackson.module:jackson-module-scala_2.11:2.6.3'
  <% if (project.deps.jpa)      { -%><%- "compile 'org.springframework.boot:spring-boot-starter-data-jpa'\n" %><% } -%>
  <% if (project.deps.postgres) { -%><%- "compile 'org.postgresql:postgresql:9.4.1207'\n" %><% } -%>
  <% if (project.deps.flyway)   { -%><%- "compile 'org.flywaydb:flyway-core'\n" %><% } -%>
  // TODO Make option for actuator
  // TODO Make option for springsec
  optional 'org.springframework.boot:spring-boot-configuration-processor'
  testCompile 'org.springframework.boot:spring-boot-starter-test'
}

testSets {
  integrationTest
}

//If you want to ensure that integration tests are run every time when you invoke
//this task, uncomment the following block.
project.integrationTest {
  outputs.upToDateWhen { false }
}

//Ensure that the check task fails the build if there are failing integration tests.
check.dependsOn integrationTest

//Ensure that our unit tests are run before our integration tests
integrationTest.mustRunAfter test

//Ensure that the HTML reports of unit and integration tests are written to different directories.
tasks.withType(Test) {
  reports.html.destination = file("${reporting.baseDir}/${name}")
}

compileJava.dependsOn(processResources)

task wrapper(type: Wrapper) {
  gradleVersion = '2.11'
}
